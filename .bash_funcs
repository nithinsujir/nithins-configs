#!/bin/bash
CPUS=$(grep processor /proc/cpuinfo | wc -l)
THREADS=$((CPUS*2))
export SSH="ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o loglevel=error"
export SCP="scp -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o loglevel=error"

parse_git_branch() {
    git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/'
}

# parent branch
gpb() {
	local cur_branch=$(git rev-parse --abbrev-ref HEAD)
	git show-branch -a 2>/dev/null | grep '\*' | grep -v `git rev-parse --abbrev-ref HEAD` | head -n1 | sed 's/.*\[\(.*\)\].*/\1/' | sed 's/[\^~].*//'
}

# outgoing changes to parent
gio() {
	local parent_branch=$(gpb)

	if [[ -z $parent_branch ]]; then
		parent_branch="origin"
	fi
	git log $parent_branch.. "$@"
}

# git export outgoing changes
gie() {
	local cur_branch=$(git rev-parse --abbrev-ref HEAD)
	local dest="$HOME/patches/$cur_branch/$(date +'%b-%d__%H.%M')"
	local parent=$(gpb)
	local count=$(git log $(gpb).. | grep ^commit | wc -l)
	mkdir -p $dest
	git format-patch -s -o $dest/ -$count
}

parse_hg_branch() {
    local curdir=`pwd`

    while [ "$curdir" != "/" ]
    do
	    if [ -f "$curdir/.hg/branch" ]
	    then
		    echo "(`cat $curdir/.hg/branch`)"
		    return
	    fi

	    curdir=`dirname "$curdir"`
    done
}

cur_hg_bookmark() {
    local curdir=`pwd`

    while [ "$curdir" != "/" ]
    do
	    if [ -f "$curdir/.hg/bookmarks.current" ]
	    then
		    echo "`cat $curdir/.hg/bookmarks.current`"
		    return
	    fi

	    curdir=`dirname "$curdir"`
    done

}

parse_hg_bookmark() {
	local book=$(cur_hg_bookmark)

	if [[ x$book == x ]] ; then
		return
	fi

	echo "($book)"
}

hgm() {
	hg paths | grep -q tintri

	local BR=(hg branch)

	if [ $BR == "default" ]
	then
		hg up master
	else
		hg up master-$BR
	fi
}

hgmf() {
	local BR=`hg branch`

	if [ $BR == "default" ]
	then
		hg bookmark -f master
	else
		hg bookmark -f master-$BR
	fi
}

hgp() {
	# If branch not passed in use current branch
	local BR=${1:-$( hg branch )}

	for repo in platform fs ui
	do
		pushd $TOPDIR/$repo > /dev/null
		hg up $BR
		hg pull

		hg up $BR
		if [ $BR == "default" ]
		then
			hg bookmarks -f master
		else
			hg bookmarks -f master-$BR
		fi

		popd > /dev/null
	done

	#pushd $TOPDIR/plat-os
	#hg tupdate
	#popd > /dev/null
}

hgt() {
	for repo in platform fs ui oneui
	do
		pushd $TOPDIR/$repo > /dev/null
		hg tupdate
		popd > /dev/null
	done
}

hgbd() {
	hg bookmark -d $(cur_hg_bookmark)
}

HGMF() {
	hgbd
	hgmf
}

hgbr() {
	local BR=$1
	local BR_ROOT=`hg out -r $BR | grep changeset | head -n 1 | awk {'print $2;'}`

	hg rebase -s $BR_ROOT -d .
	hg up $BR
}

hgho() {
	local BR_ROOT=`hg out -r . | grep changeset | head -n 1 | awk {'print $2;'}`
	hg histedit $BR_ROOT
}

_cs() {
	rm tags
	rm cscope.*

	find . -name "*.[ch]" | grep -Ev "sound|video|arch.arm|arch.frv|arch.blackfin|arch.cris|arch.microb|arch.powerpc|s390|arch.sh|bluetooth|infiniband|isdn|pcmcia|ceph|btrfs|fs.hfs|fs.hp|fs.jf|fs.ntfs|fs.jbd|fs.min|fs.nil|fs.ocf|fs.xfs|fs.nfs|ubifs|wireless|wimax|chelsio|.fufcache|drivers.media|drivers.input|drivers.atm|drivers.gpu|macintosh|m68k|xtensa|sparc|fs.nls|fs.cifs|squashfs|fs.befs|reiserfs|fs.gfs|fs.dlm|include.media|include.linux.usb|dvb|config.nls|config.media|hisax|usb|config.snd|hid|mellanox|net.ppp|net.hamradio|staging|alpha|avr32|unicore32|mn10300|arch.um|c6x|m32r|hexagon|h8300|parisc|mips|arch.score|openrisc|ia64|arch.tile|adfs|coda|fs.afs|fs.udf|fs.9p|fs.exofs|ncpfs|freevxfs|mfd|linux.input|config.input|mtd|touchscreen|irda|patches|ixgbe-2|ixgbe-3.2|ixgbe-3.3|igb-2|igb-3|mpt2|mpt3sas-4|scsi.mpt2|netlist-1.4|extdrivers.umx|extdrivers.umem|madura-0.3|kernel-sample|intel.ntb|i40e-1.2.38|extdrivers.plx|.mod.c" > cscope.files
	find . -name "*.cpp" >> cscope.files

	/usr/bin/cscope -bv
	ctags --extra=+f -V -L cscope.files

	find {scripts,tools} -type f  -exec grep -Il . {} \; | xargs file | grep -e Bourne -e "POSIX shell" | sed 's/:.*$//'  > cscope.scripts
	ctags --extra=+f -aV -L cscope.scripts
}

rsa() {
	echo "Authorizing on $1"
	pushd $HOME > /dev/null
	cat .ssh/id_rsa.pub | ssh $1 'cat >> .ssh/authorized_keys'
	popd > /dev/null
}

tsh() {
	local target=$1

	tsa $target

	shift
	$SSH root@$target $@
}

ish() {
	local target=$1-ipmi
	sshpass  -p superuser ssh -o StrictHostKeyChecking=no sysadmin@$target
}

tcp() {
	local target=$1

	tsa $target

	if [[ ! $1 =~ : ]]; then
		target=$target:
	fi
	shift
	/usr/bin/scp -r -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o loglevel=error "$@" root@$target
}

# isolsetup
isols() {
	local target=$1
	local ip=$(ping -c 1 -W 1 $target-ipmi | grep $target | grep PING | grep -o '[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}')
	local mask=$(ping -c 1 -W 1 $target-ipmi | grep $target | grep PING | grep -o '[0-9]\{1,3\}\.[0-9]\{1,3\}\.')0.1

	tsh $1 "/root/nsujir/isolsetup.sh $ip $mask"
}

hgc0() {
	hg commit -m "bug 0"
}

hgcm() {
	hg commit -m "$@"
}

hgc() {
	hg commit "$@"
}

hgd() {
	hg diff
}

sai() {
	local pkgmgr=apt-get

	if [[ -e /usr/bin/dnf ]]; then
		pkgmgr=dnf
	elif [[ -e /usr/bin/yum ]]; then
		pkgmgr=yum
	fi

	sudo $pkgmgr install "$@"
}

syu() {
	local pkgmgr=apt-get

	if [[ -e /usr/bin/dnf ]]; then
		pkgmgr=dnf
	elif [[ -e /usr/bin/yum ]]; then
		pkgmgr=yum
	fi

	sudo $pkgmgr update "$@"
}

sar() {
	local pkgmgr=apt-get

	if [[ -e /usr/bin/dnf ]]; then
		pkgmgr=dnf
	elif [[ -e /usr/bin/yum ]]; then
		pkgmgr=yum
	fi

	sudo $pkgmgr remove "$@"
}

syr() {
	sar "$@"
}

# Generate ssh keys and setup auto login on target
tsa() {
	local target=$1

	if [[ ! -e $HOME/.ssh/id_rsa.pub ]]; then
		ssh-keygen -f $HOME/.ssh/id_rsa -N ''
	fi

	tsa.exp $target
}

# docker: execute a command in a container
# dex <container> <cmd>
dex(){
	local cont=$1
	shift
	local args="$@"
	docker exec -u `id -u $USER`:`id -g $USER` -it $cont bash -c "cd `pwd`;$args"
}

# docker: start a new shell to a container
dsh() {
	local cont=txcon-${1:-cen68}
	dex $cont "/bin/bash"
}

# docker: attach to a shell in a container
dat() {
	local cont=txcon-${1:-cen68}
	docker attach $cont
}

g4c() {
  g4 changes --files -L "$@" | less
}

g4nc() {
  g4c -u nsujir "$@"
}

